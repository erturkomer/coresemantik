const mongoose = require("mongoose");

const studentSchema = new mongoose.Schema(
  {
    username: { type: String, required: true }, // Kullanƒ±cƒ± adƒ±
    fullname: { type: String, required: true }, // Ad Soyad
    email: { type: String, required: true, unique: true }, // E-posta (benzersiz)
    password: { type: String, required: true }, // ≈ûifre
    role: {
      type: String,
      default: "student",
      enum: ["student", "teacher", "schoolDirector", "admin"], // Daha anla≈üƒ±lƒ±r rol isimleri
    },
    avatar: { type: String }, // Otomatik olu≈üturulacak profil resmi
    badge: { type: String }, // Ba≈üarƒ± rozeti
    gif: { type: String }, // Profil GIF'i

    // √ñƒürencinin ilerleme durumu
    currentProgress: [
      {
        educationId: { type: mongoose.Schema.Types.ObjectId, ref: "Education" }, // Eƒüitim ID'si
        lessonId: { type: mongoose.Schema.Types.ObjectId, ref: "Lesson" }, // Ders ID'si
        questionId: { type: mongoose.Schema.Types.ObjectId, ref: "Question" }, // Son √ß√∂z√ºlen soru ID'si
      },
    ],
  },
  { timestamps: true }
);

// üìå **Pre-save middleware: Kullanƒ±cƒ±nƒ±n ba≈ü harflerinden avatar URL'si olu≈üturur**
studentSchema.pre("save", function (next) {
  if (!this.avatar && this.fullname) {
    const initials = this.fullname
      .split(" ") // ƒ∞smi bo≈üluklardan ayƒ±r
      .map((n) => n[0]) // Her kelimenin ilk harfini al
      .join("") // Birle≈ütir
      .toUpperCase(); // B√ºy√ºk harf yap

    this.avatar = `https://ui-avatars.com/api/?name=${initials}&background=random&color=ffffff&bold=true`;
  }
  next(); 
});

module.exports = mongoose.model("Student", studentSchema);
